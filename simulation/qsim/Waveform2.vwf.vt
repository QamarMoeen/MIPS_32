// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/25/2023 21:45:51"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    wrapper
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module wrapper_vlg_sample_tst(
	branch_decision,
	jump_decision,
	opt,
	TOP_clock,
	top_MemToReg,
	top_RegDst,
	top_RegWrite,
	TOP_reset,
	sampler_tx
);
input  branch_decision;
input  jump_decision;
input [2:0] opt;
input  TOP_clock;
input  top_MemToReg;
input  top_RegDst;
input  top_RegWrite;
input  TOP_reset;
output sampler_tx;

reg sample;
time current_time;
always @(branch_decision or jump_decision or opt or TOP_clock or top_MemToReg or top_RegDst or top_RegWrite or TOP_reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module wrapper_vlg_check_tst (
	hex0,
	hex1,
	hex2,
	hex3,
	hex4,
	hex5,
	hex6,
	hex7,
	leds,
	top_hexout,
	sampler_rx
);
input [6:0] hex0;
input [6:0] hex1;
input [6:0] hex2;
input [6:0] hex3;
input [6:0] hex4;
input [6:0] hex5;
input [6:0] hex6;
input [6:0] hex7;
input [3:0] leds;
input [31:0] top_hexout;
input sampler_rx;

reg [6:0] hex0_expected;
reg [6:0] hex1_expected;
reg [6:0] hex2_expected;
reg [6:0] hex3_expected;
reg [6:0] hex4_expected;
reg [6:0] hex5_expected;
reg [6:0] hex6_expected;
reg [6:0] hex7_expected;
reg [3:0] leds_expected;
reg [31:0] top_hexout_expected;

reg [6:0] hex0_prev;
reg [6:0] hex1_prev;
reg [6:0] hex2_prev;
reg [6:0] hex3_prev;
reg [6:0] hex4_prev;
reg [6:0] hex5_prev;
reg [6:0] hex6_prev;
reg [6:0] hex7_prev;
reg [3:0] leds_prev;
reg [31:0] top_hexout_prev;

reg [6:0] hex0_expected_prev;
reg [6:0] hex1_expected_prev;
reg [6:0] hex2_expected_prev;
reg [6:0] hex3_expected_prev;
reg [6:0] hex4_expected_prev;
reg [6:0] hex5_expected_prev;
reg [6:0] hex6_expected_prev;
reg [6:0] hex7_expected_prev;
reg [3:0] leds_expected_prev;
reg [31:0] top_hexout_expected_prev;

reg [6:0] last_hex0_exp;
reg [6:0] last_hex1_exp;
reg [6:0] last_hex2_exp;
reg [6:0] last_hex3_exp;
reg [6:0] last_hex4_exp;
reg [6:0] last_hex5_exp;
reg [6:0] last_hex6_exp;
reg [6:0] last_hex7_exp;
reg [3:0] last_leds_exp;
reg [31:0] last_top_hexout_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:10] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 10'b1;
end

// update real /o prevs

always @(trigger)
begin
	hex0_prev = hex0;
	hex1_prev = hex1;
	hex2_prev = hex2;
	hex3_prev = hex3;
	hex4_prev = hex4;
	hex5_prev = hex5;
	hex6_prev = hex6;
	hex7_prev = hex7;
	leds_prev = leds;
	top_hexout_prev = top_hexout;
end

// update expected /o prevs

always @(trigger)
begin
	hex0_expected_prev = hex0_expected;
	hex1_expected_prev = hex1_expected;
	hex2_expected_prev = hex2_expected;
	hex3_expected_prev = hex3_expected;
	hex4_expected_prev = hex4_expected;
	hex5_expected_prev = hex5_expected;
	hex6_expected_prev = hex6_expected;
	hex7_expected_prev = hex7_expected;
	leds_expected_prev = leds_expected;
	top_hexout_expected_prev = top_hexout_expected;
end


// expected hex0[ 6 ]
initial
begin
	hex0_expected[6] = 1'bX;
end 
// expected hex0[ 5 ]
initial
begin
	hex0_expected[5] = 1'bX;
end 
// expected hex0[ 4 ]
initial
begin
	hex0_expected[4] = 1'bX;
end 
// expected hex0[ 3 ]
initial
begin
	hex0_expected[3] = 1'bX;
end 
// expected hex0[ 2 ]
initial
begin
	hex0_expected[2] = 1'bX;
end 
// expected hex0[ 1 ]
initial
begin
	hex0_expected[1] = 1'bX;
end 
// expected hex0[ 0 ]
initial
begin
	hex0_expected[0] = 1'bX;
end 
// expected hex1[ 6 ]
initial
begin
	hex1_expected[6] = 1'bX;
end 
// expected hex1[ 5 ]
initial
begin
	hex1_expected[5] = 1'bX;
end 
// expected hex1[ 4 ]
initial
begin
	hex1_expected[4] = 1'bX;
end 
// expected hex1[ 3 ]
initial
begin
	hex1_expected[3] = 1'bX;
end 
// expected hex1[ 2 ]
initial
begin
	hex1_expected[2] = 1'bX;
end 
// expected hex1[ 1 ]
initial
begin
	hex1_expected[1] = 1'bX;
end 
// expected hex1[ 0 ]
initial
begin
	hex1_expected[0] = 1'bX;
end 
// expected hex2[ 6 ]
initial
begin
	hex2_expected[6] = 1'bX;
end 
// expected hex2[ 5 ]
initial
begin
	hex2_expected[5] = 1'bX;
end 
// expected hex2[ 4 ]
initial
begin
	hex2_expected[4] = 1'bX;
end 
// expected hex2[ 3 ]
initial
begin
	hex2_expected[3] = 1'bX;
end 
// expected hex2[ 2 ]
initial
begin
	hex2_expected[2] = 1'bX;
end 
// expected hex2[ 1 ]
initial
begin
	hex2_expected[1] = 1'bX;
end 
// expected hex2[ 0 ]
initial
begin
	hex2_expected[0] = 1'bX;
end 
// expected hex3[ 6 ]
initial
begin
	hex3_expected[6] = 1'bX;
end 
// expected hex3[ 5 ]
initial
begin
	hex3_expected[5] = 1'bX;
end 
// expected hex3[ 4 ]
initial
begin
	hex3_expected[4] = 1'bX;
end 
// expected hex3[ 3 ]
initial
begin
	hex3_expected[3] = 1'bX;
end 
// expected hex3[ 2 ]
initial
begin
	hex3_expected[2] = 1'bX;
end 
// expected hex3[ 1 ]
initial
begin
	hex3_expected[1] = 1'bX;
end 
// expected hex3[ 0 ]
initial
begin
	hex3_expected[0] = 1'bX;
end 
// expected hex4[ 6 ]
initial
begin
	hex4_expected[6] = 1'bX;
end 
// expected hex4[ 5 ]
initial
begin
	hex4_expected[5] = 1'bX;
end 
// expected hex4[ 4 ]
initial
begin
	hex4_expected[4] = 1'bX;
end 
// expected hex4[ 3 ]
initial
begin
	hex4_expected[3] = 1'bX;
end 
// expected hex4[ 2 ]
initial
begin
	hex4_expected[2] = 1'bX;
end 
// expected hex4[ 1 ]
initial
begin
	hex4_expected[1] = 1'bX;
end 
// expected hex4[ 0 ]
initial
begin
	hex4_expected[0] = 1'bX;
end 
// expected hex5[ 6 ]
initial
begin
	hex5_expected[6] = 1'bX;
end 
// expected hex5[ 5 ]
initial
begin
	hex5_expected[5] = 1'bX;
end 
// expected hex5[ 4 ]
initial
begin
	hex5_expected[4] = 1'bX;
end 
// expected hex5[ 3 ]
initial
begin
	hex5_expected[3] = 1'bX;
end 
// expected hex5[ 2 ]
initial
begin
	hex5_expected[2] = 1'bX;
end 
// expected hex5[ 1 ]
initial
begin
	hex5_expected[1] = 1'bX;
end 
// expected hex5[ 0 ]
initial
begin
	hex5_expected[0] = 1'bX;
end 
// expected hex6[ 6 ]
initial
begin
	hex6_expected[6] = 1'bX;
end 
// expected hex6[ 5 ]
initial
begin
	hex6_expected[5] = 1'bX;
end 
// expected hex6[ 4 ]
initial
begin
	hex6_expected[4] = 1'bX;
end 
// expected hex6[ 3 ]
initial
begin
	hex6_expected[3] = 1'bX;
end 
// expected hex6[ 2 ]
initial
begin
	hex6_expected[2] = 1'bX;
end 
// expected hex6[ 1 ]
initial
begin
	hex6_expected[1] = 1'bX;
end 
// expected hex6[ 0 ]
initial
begin
	hex6_expected[0] = 1'bX;
end 
// expected hex7[ 6 ]
initial
begin
	hex7_expected[6] = 1'bX;
end 
// expected hex7[ 5 ]
initial
begin
	hex7_expected[5] = 1'bX;
end 
// expected hex7[ 4 ]
initial
begin
	hex7_expected[4] = 1'bX;
end 
// expected hex7[ 3 ]
initial
begin
	hex7_expected[3] = 1'bX;
end 
// expected hex7[ 2 ]
initial
begin
	hex7_expected[2] = 1'bX;
end 
// expected hex7[ 1 ]
initial
begin
	hex7_expected[1] = 1'bX;
end 
// expected hex7[ 0 ]
initial
begin
	hex7_expected[0] = 1'bX;
end 
// expected leds[ 3 ]
initial
begin
	leds_expected[3] = 1'bX;
end 
// expected leds[ 2 ]
initial
begin
	leds_expected[2] = 1'bX;
end 
// expected leds[ 1 ]
initial
begin
	leds_expected[1] = 1'bX;
end 
// expected leds[ 0 ]
initial
begin
	leds_expected[0] = 1'bX;
end 
// expected top_hexout[ 31 ]
initial
begin
	top_hexout_expected[31] = 1'bX;
end 
// expected top_hexout[ 30 ]
initial
begin
	top_hexout_expected[30] = 1'bX;
end 
// expected top_hexout[ 29 ]
initial
begin
	top_hexout_expected[29] = 1'bX;
end 
// expected top_hexout[ 28 ]
initial
begin
	top_hexout_expected[28] = 1'bX;
end 
// expected top_hexout[ 27 ]
initial
begin
	top_hexout_expected[27] = 1'bX;
end 
// expected top_hexout[ 26 ]
initial
begin
	top_hexout_expected[26] = 1'bX;
end 
// expected top_hexout[ 25 ]
initial
begin
	top_hexout_expected[25] = 1'bX;
end 
// expected top_hexout[ 24 ]
initial
begin
	top_hexout_expected[24] = 1'bX;
end 
// expected top_hexout[ 23 ]
initial
begin
	top_hexout_expected[23] = 1'bX;
end 
// expected top_hexout[ 22 ]
initial
begin
	top_hexout_expected[22] = 1'bX;
end 
// expected top_hexout[ 21 ]
initial
begin
	top_hexout_expected[21] = 1'bX;
end 
// expected top_hexout[ 20 ]
initial
begin
	top_hexout_expected[20] = 1'bX;
end 
// expected top_hexout[ 19 ]
initial
begin
	top_hexout_expected[19] = 1'bX;
end 
// expected top_hexout[ 18 ]
initial
begin
	top_hexout_expected[18] = 1'bX;
end 
// expected top_hexout[ 17 ]
initial
begin
	top_hexout_expected[17] = 1'bX;
end 
// expected top_hexout[ 16 ]
initial
begin
	top_hexout_expected[16] = 1'bX;
end 
// expected top_hexout[ 15 ]
initial
begin
	top_hexout_expected[15] = 1'bX;
end 
// expected top_hexout[ 14 ]
initial
begin
	top_hexout_expected[14] = 1'bX;
end 
// expected top_hexout[ 13 ]
initial
begin
	top_hexout_expected[13] = 1'bX;
end 
// expected top_hexout[ 12 ]
initial
begin
	top_hexout_expected[12] = 1'bX;
end 
// expected top_hexout[ 11 ]
initial
begin
	top_hexout_expected[11] = 1'bX;
end 
// expected top_hexout[ 10 ]
initial
begin
	top_hexout_expected[10] = 1'bX;
end 
// expected top_hexout[ 9 ]
initial
begin
	top_hexout_expected[9] = 1'bX;
end 
// expected top_hexout[ 8 ]
initial
begin
	top_hexout_expected[8] = 1'bX;
end 
// expected top_hexout[ 7 ]
initial
begin
	top_hexout_expected[7] = 1'bX;
end 
// expected top_hexout[ 6 ]
initial
begin
	top_hexout_expected[6] = 1'bX;
end 
// expected top_hexout[ 5 ]
initial
begin
	top_hexout_expected[5] = 1'bX;
end 
// expected top_hexout[ 4 ]
initial
begin
	top_hexout_expected[4] = 1'bX;
end 
// expected top_hexout[ 3 ]
initial
begin
	top_hexout_expected[3] = 1'bX;
end 
// expected top_hexout[ 2 ]
initial
begin
	top_hexout_expected[2] = 1'bX;
end 
// expected top_hexout[ 1 ]
initial
begin
	top_hexout_expected[1] = 1'bX;
end 
// expected top_hexout[ 0 ]
initial
begin
	top_hexout_expected[0] = 1'bX;
end 
// generate trigger
always @(hex0_expected or hex0 or hex1_expected or hex1 or hex2_expected or hex2 or hex3_expected or hex3 or hex4_expected or hex4 or hex5_expected or hex5 or hex6_expected or hex6 or hex7_expected or hex7 or leds_expected or leds or top_hexout_expected or top_hexout)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected hex0 = %b | expected hex1 = %b | expected hex2 = %b | expected hex3 = %b | expected hex4 = %b | expected hex5 = %b | expected hex6 = %b | expected hex7 = %b | expected leds = %b | expected top_hexout = %b | ",hex0_expected_prev,hex1_expected_prev,hex2_expected_prev,hex3_expected_prev,hex4_expected_prev,hex5_expected_prev,hex6_expected_prev,hex7_expected_prev,leds_expected_prev,top_hexout_expected_prev);
	$display("| real hex0 = %b | real hex1 = %b | real hex2 = %b | real hex3 = %b | real hex4 = %b | real hex5 = %b | real hex6 = %b | real hex7 = %b | real leds = %b | real top_hexout = %b | ",hex0_prev,hex1_prev,hex2_prev,hex3_prev,hex4_prev,hex5_prev,hex6_prev,hex7_prev,leds_prev,top_hexout_prev);
`endif
	if (
		( hex0_expected_prev[0] !== 1'bx ) && ( hex0_prev[0] !== hex0_expected_prev[0] )
		&& ((hex0_expected_prev[0] !== last_hex0_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex0_expected_prev);
		$display ("     Real value = %b", hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_hex0_exp[0] = hex0_expected_prev[0];
	end
	if (
		( hex0_expected_prev[1] !== 1'bx ) && ( hex0_prev[1] !== hex0_expected_prev[1] )
		&& ((hex0_expected_prev[1] !== last_hex0_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex0_expected_prev);
		$display ("     Real value = %b", hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_hex0_exp[1] = hex0_expected_prev[1];
	end
	if (
		( hex0_expected_prev[2] !== 1'bx ) && ( hex0_prev[2] !== hex0_expected_prev[2] )
		&& ((hex0_expected_prev[2] !== last_hex0_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex0_expected_prev);
		$display ("     Real value = %b", hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_hex0_exp[2] = hex0_expected_prev[2];
	end
	if (
		( hex0_expected_prev[3] !== 1'bx ) && ( hex0_prev[3] !== hex0_expected_prev[3] )
		&& ((hex0_expected_prev[3] !== last_hex0_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex0_expected_prev);
		$display ("     Real value = %b", hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_hex0_exp[3] = hex0_expected_prev[3];
	end
	if (
		( hex0_expected_prev[4] !== 1'bx ) && ( hex0_prev[4] !== hex0_expected_prev[4] )
		&& ((hex0_expected_prev[4] !== last_hex0_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex0_expected_prev);
		$display ("     Real value = %b", hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_hex0_exp[4] = hex0_expected_prev[4];
	end
	if (
		( hex0_expected_prev[5] !== 1'bx ) && ( hex0_prev[5] !== hex0_expected_prev[5] )
		&& ((hex0_expected_prev[5] !== last_hex0_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex0_expected_prev);
		$display ("     Real value = %b", hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_hex0_exp[5] = hex0_expected_prev[5];
	end
	if (
		( hex0_expected_prev[6] !== 1'bx ) && ( hex0_prev[6] !== hex0_expected_prev[6] )
		&& ((hex0_expected_prev[6] !== last_hex0_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex0_expected_prev);
		$display ("     Real value = %b", hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_hex0_exp[6] = hex0_expected_prev[6];
	end
	if (
		( hex1_expected_prev[0] !== 1'bx ) && ( hex1_prev[0] !== hex1_expected_prev[0] )
		&& ((hex1_expected_prev[0] !== last_hex1_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex1_expected_prev);
		$display ("     Real value = %b", hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_hex1_exp[0] = hex1_expected_prev[0];
	end
	if (
		( hex1_expected_prev[1] !== 1'bx ) && ( hex1_prev[1] !== hex1_expected_prev[1] )
		&& ((hex1_expected_prev[1] !== last_hex1_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex1_expected_prev);
		$display ("     Real value = %b", hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_hex1_exp[1] = hex1_expected_prev[1];
	end
	if (
		( hex1_expected_prev[2] !== 1'bx ) && ( hex1_prev[2] !== hex1_expected_prev[2] )
		&& ((hex1_expected_prev[2] !== last_hex1_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex1_expected_prev);
		$display ("     Real value = %b", hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_hex1_exp[2] = hex1_expected_prev[2];
	end
	if (
		( hex1_expected_prev[3] !== 1'bx ) && ( hex1_prev[3] !== hex1_expected_prev[3] )
		&& ((hex1_expected_prev[3] !== last_hex1_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex1_expected_prev);
		$display ("     Real value = %b", hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_hex1_exp[3] = hex1_expected_prev[3];
	end
	if (
		( hex1_expected_prev[4] !== 1'bx ) && ( hex1_prev[4] !== hex1_expected_prev[4] )
		&& ((hex1_expected_prev[4] !== last_hex1_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex1_expected_prev);
		$display ("     Real value = %b", hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_hex1_exp[4] = hex1_expected_prev[4];
	end
	if (
		( hex1_expected_prev[5] !== 1'bx ) && ( hex1_prev[5] !== hex1_expected_prev[5] )
		&& ((hex1_expected_prev[5] !== last_hex1_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex1_expected_prev);
		$display ("     Real value = %b", hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_hex1_exp[5] = hex1_expected_prev[5];
	end
	if (
		( hex1_expected_prev[6] !== 1'bx ) && ( hex1_prev[6] !== hex1_expected_prev[6] )
		&& ((hex1_expected_prev[6] !== last_hex1_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex1_expected_prev);
		$display ("     Real value = %b", hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_hex1_exp[6] = hex1_expected_prev[6];
	end
	if (
		( hex2_expected_prev[0] !== 1'bx ) && ( hex2_prev[0] !== hex2_expected_prev[0] )
		&& ((hex2_expected_prev[0] !== last_hex2_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex2_expected_prev);
		$display ("     Real value = %b", hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_hex2_exp[0] = hex2_expected_prev[0];
	end
	if (
		( hex2_expected_prev[1] !== 1'bx ) && ( hex2_prev[1] !== hex2_expected_prev[1] )
		&& ((hex2_expected_prev[1] !== last_hex2_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex2_expected_prev);
		$display ("     Real value = %b", hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_hex2_exp[1] = hex2_expected_prev[1];
	end
	if (
		( hex2_expected_prev[2] !== 1'bx ) && ( hex2_prev[2] !== hex2_expected_prev[2] )
		&& ((hex2_expected_prev[2] !== last_hex2_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex2_expected_prev);
		$display ("     Real value = %b", hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_hex2_exp[2] = hex2_expected_prev[2];
	end
	if (
		( hex2_expected_prev[3] !== 1'bx ) && ( hex2_prev[3] !== hex2_expected_prev[3] )
		&& ((hex2_expected_prev[3] !== last_hex2_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex2_expected_prev);
		$display ("     Real value = %b", hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_hex2_exp[3] = hex2_expected_prev[3];
	end
	if (
		( hex2_expected_prev[4] !== 1'bx ) && ( hex2_prev[4] !== hex2_expected_prev[4] )
		&& ((hex2_expected_prev[4] !== last_hex2_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex2_expected_prev);
		$display ("     Real value = %b", hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_hex2_exp[4] = hex2_expected_prev[4];
	end
	if (
		( hex2_expected_prev[5] !== 1'bx ) && ( hex2_prev[5] !== hex2_expected_prev[5] )
		&& ((hex2_expected_prev[5] !== last_hex2_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex2_expected_prev);
		$display ("     Real value = %b", hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_hex2_exp[5] = hex2_expected_prev[5];
	end
	if (
		( hex2_expected_prev[6] !== 1'bx ) && ( hex2_prev[6] !== hex2_expected_prev[6] )
		&& ((hex2_expected_prev[6] !== last_hex2_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex2_expected_prev);
		$display ("     Real value = %b", hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_hex2_exp[6] = hex2_expected_prev[6];
	end
	if (
		( hex3_expected_prev[0] !== 1'bx ) && ( hex3_prev[0] !== hex3_expected_prev[0] )
		&& ((hex3_expected_prev[0] !== last_hex3_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex3_expected_prev);
		$display ("     Real value = %b", hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_hex3_exp[0] = hex3_expected_prev[0];
	end
	if (
		( hex3_expected_prev[1] !== 1'bx ) && ( hex3_prev[1] !== hex3_expected_prev[1] )
		&& ((hex3_expected_prev[1] !== last_hex3_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex3_expected_prev);
		$display ("     Real value = %b", hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_hex3_exp[1] = hex3_expected_prev[1];
	end
	if (
		( hex3_expected_prev[2] !== 1'bx ) && ( hex3_prev[2] !== hex3_expected_prev[2] )
		&& ((hex3_expected_prev[2] !== last_hex3_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex3_expected_prev);
		$display ("     Real value = %b", hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_hex3_exp[2] = hex3_expected_prev[2];
	end
	if (
		( hex3_expected_prev[3] !== 1'bx ) && ( hex3_prev[3] !== hex3_expected_prev[3] )
		&& ((hex3_expected_prev[3] !== last_hex3_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex3_expected_prev);
		$display ("     Real value = %b", hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_hex3_exp[3] = hex3_expected_prev[3];
	end
	if (
		( hex3_expected_prev[4] !== 1'bx ) && ( hex3_prev[4] !== hex3_expected_prev[4] )
		&& ((hex3_expected_prev[4] !== last_hex3_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex3_expected_prev);
		$display ("     Real value = %b", hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_hex3_exp[4] = hex3_expected_prev[4];
	end
	if (
		( hex3_expected_prev[5] !== 1'bx ) && ( hex3_prev[5] !== hex3_expected_prev[5] )
		&& ((hex3_expected_prev[5] !== last_hex3_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex3_expected_prev);
		$display ("     Real value = %b", hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_hex3_exp[5] = hex3_expected_prev[5];
	end
	if (
		( hex3_expected_prev[6] !== 1'bx ) && ( hex3_prev[6] !== hex3_expected_prev[6] )
		&& ((hex3_expected_prev[6] !== last_hex3_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex3_expected_prev);
		$display ("     Real value = %b", hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_hex3_exp[6] = hex3_expected_prev[6];
	end
	if (
		( hex4_expected_prev[0] !== 1'bx ) && ( hex4_prev[0] !== hex4_expected_prev[0] )
		&& ((hex4_expected_prev[0] !== last_hex4_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex4_expected_prev);
		$display ("     Real value = %b", hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_hex4_exp[0] = hex4_expected_prev[0];
	end
	if (
		( hex4_expected_prev[1] !== 1'bx ) && ( hex4_prev[1] !== hex4_expected_prev[1] )
		&& ((hex4_expected_prev[1] !== last_hex4_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex4_expected_prev);
		$display ("     Real value = %b", hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_hex4_exp[1] = hex4_expected_prev[1];
	end
	if (
		( hex4_expected_prev[2] !== 1'bx ) && ( hex4_prev[2] !== hex4_expected_prev[2] )
		&& ((hex4_expected_prev[2] !== last_hex4_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex4_expected_prev);
		$display ("     Real value = %b", hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_hex4_exp[2] = hex4_expected_prev[2];
	end
	if (
		( hex4_expected_prev[3] !== 1'bx ) && ( hex4_prev[3] !== hex4_expected_prev[3] )
		&& ((hex4_expected_prev[3] !== last_hex4_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex4_expected_prev);
		$display ("     Real value = %b", hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_hex4_exp[3] = hex4_expected_prev[3];
	end
	if (
		( hex4_expected_prev[4] !== 1'bx ) && ( hex4_prev[4] !== hex4_expected_prev[4] )
		&& ((hex4_expected_prev[4] !== last_hex4_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex4[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex4_expected_prev);
		$display ("     Real value = %b", hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_hex4_exp[4] = hex4_expected_prev[4];
	end
	if (
		( hex4_expected_prev[5] !== 1'bx ) && ( hex4_prev[5] !== hex4_expected_prev[5] )
		&& ((hex4_expected_prev[5] !== last_hex4_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex4[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex4_expected_prev);
		$display ("     Real value = %b", hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_hex4_exp[5] = hex4_expected_prev[5];
	end
	if (
		( hex4_expected_prev[6] !== 1'bx ) && ( hex4_prev[6] !== hex4_expected_prev[6] )
		&& ((hex4_expected_prev[6] !== last_hex4_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex4[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex4_expected_prev);
		$display ("     Real value = %b", hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_hex4_exp[6] = hex4_expected_prev[6];
	end
	if (
		( hex5_expected_prev[0] !== 1'bx ) && ( hex5_prev[0] !== hex5_expected_prev[0] )
		&& ((hex5_expected_prev[0] !== last_hex5_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex5[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex5_expected_prev);
		$display ("     Real value = %b", hex5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_hex5_exp[0] = hex5_expected_prev[0];
	end
	if (
		( hex5_expected_prev[1] !== 1'bx ) && ( hex5_prev[1] !== hex5_expected_prev[1] )
		&& ((hex5_expected_prev[1] !== last_hex5_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex5[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex5_expected_prev);
		$display ("     Real value = %b", hex5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_hex5_exp[1] = hex5_expected_prev[1];
	end
	if (
		( hex5_expected_prev[2] !== 1'bx ) && ( hex5_prev[2] !== hex5_expected_prev[2] )
		&& ((hex5_expected_prev[2] !== last_hex5_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex5[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex5_expected_prev);
		$display ("     Real value = %b", hex5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_hex5_exp[2] = hex5_expected_prev[2];
	end
	if (
		( hex5_expected_prev[3] !== 1'bx ) && ( hex5_prev[3] !== hex5_expected_prev[3] )
		&& ((hex5_expected_prev[3] !== last_hex5_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex5[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex5_expected_prev);
		$display ("     Real value = %b", hex5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_hex5_exp[3] = hex5_expected_prev[3];
	end
	if (
		( hex5_expected_prev[4] !== 1'bx ) && ( hex5_prev[4] !== hex5_expected_prev[4] )
		&& ((hex5_expected_prev[4] !== last_hex5_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex5[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex5_expected_prev);
		$display ("     Real value = %b", hex5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_hex5_exp[4] = hex5_expected_prev[4];
	end
	if (
		( hex5_expected_prev[5] !== 1'bx ) && ( hex5_prev[5] !== hex5_expected_prev[5] )
		&& ((hex5_expected_prev[5] !== last_hex5_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex5[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex5_expected_prev);
		$display ("     Real value = %b", hex5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_hex5_exp[5] = hex5_expected_prev[5];
	end
	if (
		( hex5_expected_prev[6] !== 1'bx ) && ( hex5_prev[6] !== hex5_expected_prev[6] )
		&& ((hex5_expected_prev[6] !== last_hex5_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex5[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex5_expected_prev);
		$display ("     Real value = %b", hex5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_hex5_exp[6] = hex5_expected_prev[6];
	end
	if (
		( hex6_expected_prev[0] !== 1'bx ) && ( hex6_prev[0] !== hex6_expected_prev[0] )
		&& ((hex6_expected_prev[0] !== last_hex6_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex6[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex6_expected_prev);
		$display ("     Real value = %b", hex6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_hex6_exp[0] = hex6_expected_prev[0];
	end
	if (
		( hex6_expected_prev[1] !== 1'bx ) && ( hex6_prev[1] !== hex6_expected_prev[1] )
		&& ((hex6_expected_prev[1] !== last_hex6_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex6[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex6_expected_prev);
		$display ("     Real value = %b", hex6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_hex6_exp[1] = hex6_expected_prev[1];
	end
	if (
		( hex6_expected_prev[2] !== 1'bx ) && ( hex6_prev[2] !== hex6_expected_prev[2] )
		&& ((hex6_expected_prev[2] !== last_hex6_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex6[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex6_expected_prev);
		$display ("     Real value = %b", hex6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_hex6_exp[2] = hex6_expected_prev[2];
	end
	if (
		( hex6_expected_prev[3] !== 1'bx ) && ( hex6_prev[3] !== hex6_expected_prev[3] )
		&& ((hex6_expected_prev[3] !== last_hex6_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex6[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex6_expected_prev);
		$display ("     Real value = %b", hex6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_hex6_exp[3] = hex6_expected_prev[3];
	end
	if (
		( hex6_expected_prev[4] !== 1'bx ) && ( hex6_prev[4] !== hex6_expected_prev[4] )
		&& ((hex6_expected_prev[4] !== last_hex6_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex6[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex6_expected_prev);
		$display ("     Real value = %b", hex6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_hex6_exp[4] = hex6_expected_prev[4];
	end
	if (
		( hex6_expected_prev[5] !== 1'bx ) && ( hex6_prev[5] !== hex6_expected_prev[5] )
		&& ((hex6_expected_prev[5] !== last_hex6_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex6[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex6_expected_prev);
		$display ("     Real value = %b", hex6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_hex6_exp[5] = hex6_expected_prev[5];
	end
	if (
		( hex6_expected_prev[6] !== 1'bx ) && ( hex6_prev[6] !== hex6_expected_prev[6] )
		&& ((hex6_expected_prev[6] !== last_hex6_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex6[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex6_expected_prev);
		$display ("     Real value = %b", hex6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_hex6_exp[6] = hex6_expected_prev[6];
	end
	if (
		( hex7_expected_prev[0] !== 1'bx ) && ( hex7_prev[0] !== hex7_expected_prev[0] )
		&& ((hex7_expected_prev[0] !== last_hex7_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex7[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex7_expected_prev);
		$display ("     Real value = %b", hex7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_hex7_exp[0] = hex7_expected_prev[0];
	end
	if (
		( hex7_expected_prev[1] !== 1'bx ) && ( hex7_prev[1] !== hex7_expected_prev[1] )
		&& ((hex7_expected_prev[1] !== last_hex7_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex7[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex7_expected_prev);
		$display ("     Real value = %b", hex7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_hex7_exp[1] = hex7_expected_prev[1];
	end
	if (
		( hex7_expected_prev[2] !== 1'bx ) && ( hex7_prev[2] !== hex7_expected_prev[2] )
		&& ((hex7_expected_prev[2] !== last_hex7_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex7[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex7_expected_prev);
		$display ("     Real value = %b", hex7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_hex7_exp[2] = hex7_expected_prev[2];
	end
	if (
		( hex7_expected_prev[3] !== 1'bx ) && ( hex7_prev[3] !== hex7_expected_prev[3] )
		&& ((hex7_expected_prev[3] !== last_hex7_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex7[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex7_expected_prev);
		$display ("     Real value = %b", hex7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_hex7_exp[3] = hex7_expected_prev[3];
	end
	if (
		( hex7_expected_prev[4] !== 1'bx ) && ( hex7_prev[4] !== hex7_expected_prev[4] )
		&& ((hex7_expected_prev[4] !== last_hex7_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex7[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex7_expected_prev);
		$display ("     Real value = %b", hex7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_hex7_exp[4] = hex7_expected_prev[4];
	end
	if (
		( hex7_expected_prev[5] !== 1'bx ) && ( hex7_prev[5] !== hex7_expected_prev[5] )
		&& ((hex7_expected_prev[5] !== last_hex7_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex7[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex7_expected_prev);
		$display ("     Real value = %b", hex7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_hex7_exp[5] = hex7_expected_prev[5];
	end
	if (
		( hex7_expected_prev[6] !== 1'bx ) && ( hex7_prev[6] !== hex7_expected_prev[6] )
		&& ((hex7_expected_prev[6] !== last_hex7_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex7[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex7_expected_prev);
		$display ("     Real value = %b", hex7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_hex7_exp[6] = hex7_expected_prev[6];
	end
	if (
		( leds_expected_prev[0] !== 1'bx ) && ( leds_prev[0] !== leds_expected_prev[0] )
		&& ((leds_expected_prev[0] !== last_leds_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_expected_prev);
		$display ("     Real value = %b", leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_leds_exp[0] = leds_expected_prev[0];
	end
	if (
		( leds_expected_prev[1] !== 1'bx ) && ( leds_prev[1] !== leds_expected_prev[1] )
		&& ((leds_expected_prev[1] !== last_leds_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_expected_prev);
		$display ("     Real value = %b", leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_leds_exp[1] = leds_expected_prev[1];
	end
	if (
		( leds_expected_prev[2] !== 1'bx ) && ( leds_prev[2] !== leds_expected_prev[2] )
		&& ((leds_expected_prev[2] !== last_leds_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_expected_prev);
		$display ("     Real value = %b", leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_leds_exp[2] = leds_expected_prev[2];
	end
	if (
		( leds_expected_prev[3] !== 1'bx ) && ( leds_prev[3] !== leds_expected_prev[3] )
		&& ((leds_expected_prev[3] !== last_leds_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_expected_prev);
		$display ("     Real value = %b", leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_leds_exp[3] = leds_expected_prev[3];
	end
	if (
		( top_hexout_expected_prev[0] !== 1'bx ) && ( top_hexout_prev[0] !== top_hexout_expected_prev[0] )
		&& ((top_hexout_expected_prev[0] !== last_top_hexout_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port top_hexout[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", top_hexout_expected_prev);
		$display ("     Real value = %b", top_hexout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_top_hexout_exp[0] = top_hexout_expected_prev[0];
	end
	if (
		( top_hexout_expected_prev[1] !== 1'bx ) && ( top_hexout_prev[1] !== top_hexout_expected_prev[1] )
		&& ((top_hexout_expected_prev[1] !== last_top_hexout_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port top_hexout[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", top_hexout_expected_prev);
		$display ("     Real value = %b", top_hexout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_top_hexout_exp[1] = top_hexout_expected_prev[1];
	end
	if (
		( top_hexout_expected_prev[2] !== 1'bx ) && ( top_hexout_prev[2] !== top_hexout_expected_prev[2] )
		&& ((top_hexout_expected_prev[2] !== last_top_hexout_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port top_hexout[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", top_hexout_expected_prev);
		$display ("     Real value = %b", top_hexout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_top_hexout_exp[2] = top_hexout_expected_prev[2];
	end
	if (
		( top_hexout_expected_prev[3] !== 1'bx ) && ( top_hexout_prev[3] !== top_hexout_expected_prev[3] )
		&& ((top_hexout_expected_prev[3] !== last_top_hexout_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port top_hexout[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", top_hexout_expected_prev);
		$display ("     Real value = %b", top_hexout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_top_hexout_exp[3] = top_hexout_expected_prev[3];
	end
	if (
		( top_hexout_expected_prev[4] !== 1'bx ) && ( top_hexout_prev[4] !== top_hexout_expected_prev[4] )
		&& ((top_hexout_expected_prev[4] !== last_top_hexout_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port top_hexout[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", top_hexout_expected_prev);
		$display ("     Real value = %b", top_hexout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_top_hexout_exp[4] = top_hexout_expected_prev[4];
	end
	if (
		( top_hexout_expected_prev[5] !== 1'bx ) && ( top_hexout_prev[5] !== top_hexout_expected_prev[5] )
		&& ((top_hexout_expected_prev[5] !== last_top_hexout_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port top_hexout[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", top_hexout_expected_prev);
		$display ("     Real value = %b", top_hexout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_top_hexout_exp[5] = top_hexout_expected_prev[5];
	end
	if (
		( top_hexout_expected_prev[6] !== 1'bx ) && ( top_hexout_prev[6] !== top_hexout_expected_prev[6] )
		&& ((top_hexout_expected_prev[6] !== last_top_hexout_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port top_hexout[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", top_hexout_expected_prev);
		$display ("     Real value = %b", top_hexout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_top_hexout_exp[6] = top_hexout_expected_prev[6];
	end
	if (
		( top_hexout_expected_prev[7] !== 1'bx ) && ( top_hexout_prev[7] !== top_hexout_expected_prev[7] )
		&& ((top_hexout_expected_prev[7] !== last_top_hexout_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port top_hexout[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", top_hexout_expected_prev);
		$display ("     Real value = %b", top_hexout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_top_hexout_exp[7] = top_hexout_expected_prev[7];
	end
	if (
		( top_hexout_expected_prev[8] !== 1'bx ) && ( top_hexout_prev[8] !== top_hexout_expected_prev[8] )
		&& ((top_hexout_expected_prev[8] !== last_top_hexout_exp[8]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port top_hexout[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", top_hexout_expected_prev);
		$display ("     Real value = %b", top_hexout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_top_hexout_exp[8] = top_hexout_expected_prev[8];
	end
	if (
		( top_hexout_expected_prev[9] !== 1'bx ) && ( top_hexout_prev[9] !== top_hexout_expected_prev[9] )
		&& ((top_hexout_expected_prev[9] !== last_top_hexout_exp[9]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port top_hexout[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", top_hexout_expected_prev);
		$display ("     Real value = %b", top_hexout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_top_hexout_exp[9] = top_hexout_expected_prev[9];
	end
	if (
		( top_hexout_expected_prev[10] !== 1'bx ) && ( top_hexout_prev[10] !== top_hexout_expected_prev[10] )
		&& ((top_hexout_expected_prev[10] !== last_top_hexout_exp[10]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port top_hexout[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", top_hexout_expected_prev);
		$display ("     Real value = %b", top_hexout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_top_hexout_exp[10] = top_hexout_expected_prev[10];
	end
	if (
		( top_hexout_expected_prev[11] !== 1'bx ) && ( top_hexout_prev[11] !== top_hexout_expected_prev[11] )
		&& ((top_hexout_expected_prev[11] !== last_top_hexout_exp[11]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port top_hexout[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", top_hexout_expected_prev);
		$display ("     Real value = %b", top_hexout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_top_hexout_exp[11] = top_hexout_expected_prev[11];
	end
	if (
		( top_hexout_expected_prev[12] !== 1'bx ) && ( top_hexout_prev[12] !== top_hexout_expected_prev[12] )
		&& ((top_hexout_expected_prev[12] !== last_top_hexout_exp[12]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port top_hexout[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", top_hexout_expected_prev);
		$display ("     Real value = %b", top_hexout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_top_hexout_exp[12] = top_hexout_expected_prev[12];
	end
	if (
		( top_hexout_expected_prev[13] !== 1'bx ) && ( top_hexout_prev[13] !== top_hexout_expected_prev[13] )
		&& ((top_hexout_expected_prev[13] !== last_top_hexout_exp[13]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port top_hexout[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", top_hexout_expected_prev);
		$display ("     Real value = %b", top_hexout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_top_hexout_exp[13] = top_hexout_expected_prev[13];
	end
	if (
		( top_hexout_expected_prev[14] !== 1'bx ) && ( top_hexout_prev[14] !== top_hexout_expected_prev[14] )
		&& ((top_hexout_expected_prev[14] !== last_top_hexout_exp[14]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port top_hexout[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", top_hexout_expected_prev);
		$display ("     Real value = %b", top_hexout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_top_hexout_exp[14] = top_hexout_expected_prev[14];
	end
	if (
		( top_hexout_expected_prev[15] !== 1'bx ) && ( top_hexout_prev[15] !== top_hexout_expected_prev[15] )
		&& ((top_hexout_expected_prev[15] !== last_top_hexout_exp[15]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port top_hexout[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", top_hexout_expected_prev);
		$display ("     Real value = %b", top_hexout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_top_hexout_exp[15] = top_hexout_expected_prev[15];
	end
	if (
		( top_hexout_expected_prev[16] !== 1'bx ) && ( top_hexout_prev[16] !== top_hexout_expected_prev[16] )
		&& ((top_hexout_expected_prev[16] !== last_top_hexout_exp[16]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port top_hexout[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", top_hexout_expected_prev);
		$display ("     Real value = %b", top_hexout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_top_hexout_exp[16] = top_hexout_expected_prev[16];
	end
	if (
		( top_hexout_expected_prev[17] !== 1'bx ) && ( top_hexout_prev[17] !== top_hexout_expected_prev[17] )
		&& ((top_hexout_expected_prev[17] !== last_top_hexout_exp[17]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port top_hexout[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", top_hexout_expected_prev);
		$display ("     Real value = %b", top_hexout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_top_hexout_exp[17] = top_hexout_expected_prev[17];
	end
	if (
		( top_hexout_expected_prev[18] !== 1'bx ) && ( top_hexout_prev[18] !== top_hexout_expected_prev[18] )
		&& ((top_hexout_expected_prev[18] !== last_top_hexout_exp[18]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port top_hexout[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", top_hexout_expected_prev);
		$display ("     Real value = %b", top_hexout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_top_hexout_exp[18] = top_hexout_expected_prev[18];
	end
	if (
		( top_hexout_expected_prev[19] !== 1'bx ) && ( top_hexout_prev[19] !== top_hexout_expected_prev[19] )
		&& ((top_hexout_expected_prev[19] !== last_top_hexout_exp[19]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port top_hexout[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", top_hexout_expected_prev);
		$display ("     Real value = %b", top_hexout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_top_hexout_exp[19] = top_hexout_expected_prev[19];
	end
	if (
		( top_hexout_expected_prev[20] !== 1'bx ) && ( top_hexout_prev[20] !== top_hexout_expected_prev[20] )
		&& ((top_hexout_expected_prev[20] !== last_top_hexout_exp[20]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port top_hexout[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", top_hexout_expected_prev);
		$display ("     Real value = %b", top_hexout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_top_hexout_exp[20] = top_hexout_expected_prev[20];
	end
	if (
		( top_hexout_expected_prev[21] !== 1'bx ) && ( top_hexout_prev[21] !== top_hexout_expected_prev[21] )
		&& ((top_hexout_expected_prev[21] !== last_top_hexout_exp[21]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port top_hexout[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", top_hexout_expected_prev);
		$display ("     Real value = %b", top_hexout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_top_hexout_exp[21] = top_hexout_expected_prev[21];
	end
	if (
		( top_hexout_expected_prev[22] !== 1'bx ) && ( top_hexout_prev[22] !== top_hexout_expected_prev[22] )
		&& ((top_hexout_expected_prev[22] !== last_top_hexout_exp[22]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port top_hexout[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", top_hexout_expected_prev);
		$display ("     Real value = %b", top_hexout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_top_hexout_exp[22] = top_hexout_expected_prev[22];
	end
	if (
		( top_hexout_expected_prev[23] !== 1'bx ) && ( top_hexout_prev[23] !== top_hexout_expected_prev[23] )
		&& ((top_hexout_expected_prev[23] !== last_top_hexout_exp[23]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port top_hexout[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", top_hexout_expected_prev);
		$display ("     Real value = %b", top_hexout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_top_hexout_exp[23] = top_hexout_expected_prev[23];
	end
	if (
		( top_hexout_expected_prev[24] !== 1'bx ) && ( top_hexout_prev[24] !== top_hexout_expected_prev[24] )
		&& ((top_hexout_expected_prev[24] !== last_top_hexout_exp[24]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port top_hexout[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", top_hexout_expected_prev);
		$display ("     Real value = %b", top_hexout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_top_hexout_exp[24] = top_hexout_expected_prev[24];
	end
	if (
		( top_hexout_expected_prev[25] !== 1'bx ) && ( top_hexout_prev[25] !== top_hexout_expected_prev[25] )
		&& ((top_hexout_expected_prev[25] !== last_top_hexout_exp[25]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port top_hexout[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", top_hexout_expected_prev);
		$display ("     Real value = %b", top_hexout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_top_hexout_exp[25] = top_hexout_expected_prev[25];
	end
	if (
		( top_hexout_expected_prev[26] !== 1'bx ) && ( top_hexout_prev[26] !== top_hexout_expected_prev[26] )
		&& ((top_hexout_expected_prev[26] !== last_top_hexout_exp[26]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port top_hexout[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", top_hexout_expected_prev);
		$display ("     Real value = %b", top_hexout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_top_hexout_exp[26] = top_hexout_expected_prev[26];
	end
	if (
		( top_hexout_expected_prev[27] !== 1'bx ) && ( top_hexout_prev[27] !== top_hexout_expected_prev[27] )
		&& ((top_hexout_expected_prev[27] !== last_top_hexout_exp[27]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port top_hexout[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", top_hexout_expected_prev);
		$display ("     Real value = %b", top_hexout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_top_hexout_exp[27] = top_hexout_expected_prev[27];
	end
	if (
		( top_hexout_expected_prev[28] !== 1'bx ) && ( top_hexout_prev[28] !== top_hexout_expected_prev[28] )
		&& ((top_hexout_expected_prev[28] !== last_top_hexout_exp[28]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port top_hexout[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", top_hexout_expected_prev);
		$display ("     Real value = %b", top_hexout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_top_hexout_exp[28] = top_hexout_expected_prev[28];
	end
	if (
		( top_hexout_expected_prev[29] !== 1'bx ) && ( top_hexout_prev[29] !== top_hexout_expected_prev[29] )
		&& ((top_hexout_expected_prev[29] !== last_top_hexout_exp[29]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port top_hexout[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", top_hexout_expected_prev);
		$display ("     Real value = %b", top_hexout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_top_hexout_exp[29] = top_hexout_expected_prev[29];
	end
	if (
		( top_hexout_expected_prev[30] !== 1'bx ) && ( top_hexout_prev[30] !== top_hexout_expected_prev[30] )
		&& ((top_hexout_expected_prev[30] !== last_top_hexout_exp[30]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port top_hexout[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", top_hexout_expected_prev);
		$display ("     Real value = %b", top_hexout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_top_hexout_exp[30] = top_hexout_expected_prev[30];
	end
	if (
		( top_hexout_expected_prev[31] !== 1'bx ) && ( top_hexout_prev[31] !== top_hexout_expected_prev[31] )
		&& ((top_hexout_expected_prev[31] !== last_top_hexout_exp[31]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port top_hexout[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", top_hexout_expected_prev);
		$display ("     Real value = %b", top_hexout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_top_hexout_exp[31] = top_hexout_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module wrapper_vlg_vec_tst();
// constants                                           
// general purpose registers
reg branch_decision;
reg jump_decision;
reg [2:0] opt;
reg TOP_clock;
reg top_MemToReg;
reg top_RegDst;
reg top_RegWrite;
reg TOP_reset;
// wires                                               
wire [6:0] hex0;
wire [6:0] hex1;
wire [6:0] hex2;
wire [6:0] hex3;
wire [6:0] hex4;
wire [6:0] hex5;
wire [6:0] hex6;
wire [6:0] hex7;
wire [3:0] leds;
wire [31:0] top_hexout;

wire sampler;                             

// assign statements (if any)                          
wrapper i1 (
// port map - connection between master ports and signals/registers   
	.branch_decision(branch_decision),
	.hex0(hex0),
	.hex1(hex1),
	.hex2(hex2),
	.hex3(hex3),
	.hex4(hex4),
	.hex5(hex5),
	.hex6(hex6),
	.hex7(hex7),
	.jump_decision(jump_decision),
	.leds(leds),
	.opt(opt),
	.TOP_clock(TOP_clock),
	.top_hexout(top_hexout),
	.top_MemToReg(top_MemToReg),
	.top_RegDst(top_RegDst),
	.top_RegWrite(top_RegWrite),
	.TOP_reset(TOP_reset)
);

// branch_decision
initial
begin
	branch_decision = 1'b0;
	branch_decision = #500000 1'b1;
	branch_decision = #70000 1'b0;
end 

// jump_decision
initial
begin
	jump_decision = 1'b0;
end 
// opt[ 2 ]
initial
begin
	opt[2] = 1'b0;
end 
// opt[ 1 ]
initial
begin
	opt[1] = 1'b0;
end 
// opt[ 0 ]
initial
begin
	opt[0] = 1'b0;
end 

// TOP_clock
always
begin
	TOP_clock = 1'b0;
	TOP_clock = #50000 1'b1;
	#50000;
end 

// top_MemToReg
initial
begin
	top_MemToReg = 1'b0;
end 

// top_RegDst
initial
begin
	top_RegDst = 1'b0;
end 

// top_RegWrite
initial
begin
	top_RegWrite = 1'b0;
end 

// TOP_reset
initial
begin
	TOP_reset = 1'b0;
end 

wrapper_vlg_sample_tst tb_sample (
	.branch_decision(branch_decision),
	.jump_decision(jump_decision),
	.opt(opt),
	.TOP_clock(TOP_clock),
	.top_MemToReg(top_MemToReg),
	.top_RegDst(top_RegDst),
	.top_RegWrite(top_RegWrite),
	.TOP_reset(TOP_reset),
	.sampler_tx(sampler)
);

wrapper_vlg_check_tst tb_out(
	.hex0(hex0),
	.hex1(hex1),
	.hex2(hex2),
	.hex3(hex3),
	.hex4(hex4),
	.hex5(hex5),
	.hex6(hex6),
	.hex7(hex7),
	.leds(leds),
	.top_hexout(top_hexout),
	.sampler_rx(sampler)
);
endmodule

